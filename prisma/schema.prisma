
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------
enum SensorType {
  TEMPERATURE
  GAS
  PRESSURE
  LEVEL
  MOTION
  FATIGUE
  GPS
}


enum StatusAvailability {
  AVAILABLE
  NOTAVAILABLE
}

enum ServiceStatus {
  ACTIVE        // en curso
  PAUSED
  FINISHED      // finalizado sin incidente
  CANCELLED
  INCIDENT      // finalizado con incidente
}

enum RecordStatus {
  NORMAL
  ANOMALOUS
  CRITICAL
}

enum NotificationType {
  ALERT   // requiere atención inmediata
  INFO    // informativa
}

enum NotificationStatus {
  PENDING
  SENT
  ACKNOWLEDGED
  FAILED
}

// ---------- BASE USER ----------
model User {
  id        Int      @id @default(autoincrement())
  password  String
  email     String   @unique
  profile   Profile?
}

// ---------- PERFIL (BASE) ----------
model Profile {
  id              Int      @id @default(autoincrement())
  firstName       String
  lastName        String
  address         String
  emergencyPhone  String?
  dateBirth       DateTime
  dni             String   @unique

  // FK a User
  userId   Int   @unique
  user     User  @relation(fields: [userId], references: [id])

  driver   Driver?
  company  Company?
}

// ---------- DRIVER (sub-tipo) ----------
model Driver {
  id              Int      @id @default(autoincrement())
  license         String
  availability    StatusAvailability @default(AVAILABLE)

  // 1-a-1 con Profile
  profileId Int @unique
  profile   Profile @relation(fields: [profileId], references: [id])

  cars     Car[]
  sensors Sensor[]
  services Service[]
}

// ---------- COMPANY (sub-tipo) ----------
model Company {
  id          Int    @id @default(autoincrement())
  socialName  String
  ruc         String  @unique

  profileId Int @unique
  profile   Profile @relation(fields: [profileId], references: [id])

  services  Service[]
}

// ---------- VEHÍCULOS ----------
model Car {
  id        Int      @id @default(autoincrement())
  plate     String   @unique
  brand     String
  model     String
  year      Int
  type      String   // cisterna, camión, etc.
  capacity  Float
  state     StatusAvailability @default(AVAILABLE)

  driverId  Int
  driver    Driver  @relation(fields: [driverId], references: [id])

  sensors   Sensor[]
  services  Service[]
}




// ---------- SENSORES ----------
model Sensor {
  id           Int        @id @default(autoincrement())
  sensorId     String
  name         String
  type         SensorType
  timestamp    DateTime
  precisionValue    Float
  value        Float
  rangeMin     Float
  rangeMax     Float

  // Parámetros genéricos u opcionales (STI)
  typeGas      String?
  latitude     Float?
  longitude     Float?

  // --- Relaciones ---
  carId     Int?    // FK opcional
  car       Car?    @relation(fields: [carId], references: [id])

  driverId  Int?    // FK opcional
  driver    Driver? @relation(fields: [driverId], references: [id])

  records      Record[]
}











// ---------- SERVICIO / VIAJE ----------
model Service {
  id               Int           @id @default(autoincrement())
  status           ServiceStatus @default(ACTIVE)
  origin           String
  destiny          String
  dateRequest      DateTime      // solicitud
  dateStart        DateTime?
  dateEnd          DateTime?
  productType      String
  productQty       Float
  productUnit      String

  // relaciones
  carId            Int
  car              Car       @relation(fields: [carId], references: [id])
  driverId         Int
  driver           Driver    @relation(fields: [driverId], references: [id])
  companyId        Int
  company          Company   @relation(fields: [companyId], references: [id])

  records          Record[]
  notifications    Notification[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// ---------- HISTÓRICO DE LECTURAS ----------
model Record {
  id          Int          @id @default(autoincrement())
  timestamp   DateTime
  sensorId    Int
  sensor      Sensor       @relation(fields: [sensorId], references: [id])
  serviceId   Int
  service     Service      @relation(fields: [serviceId], references: [id])
  value       Float
  status      RecordStatus

  // datos extendidos (nullable)
  lat         Float?
  lon         Float?
  description String?

  notifications Notification[]

  @@index([serviceId, timestamp])
  @@index([sensorId, timestamp])
}

// ---------- NOTIFICACIONES ----------
model Notification {
  id           Int                @id @default(autoincrement())
  message      String
  type         NotificationType
  status       NotificationStatus @default(PENDING)
  createdAt    DateTime           @default(now())
  sentAt       DateTime?

  // Relaciones (todas opcionales)
  recordId     Int?
  record       Record?    @relation(fields: [recordId], references: [id])
  serviceId    Int?
  service      Service?   @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
  @@index([recordId])
}
